1. is a 관계와 has a 관계에 대하여 설명하시오.
 -  IS-A 관계 : this is a~ 로 표현할 수 있는 관계
    HAS-A 관계 : It has a~ 로 표현할 수 있는 관계, 애매하다 싶으면 무조건 이 관계.

2. 다형성(polymorphism)이란 무엇인가?
 - 형(데이터 타입)이 많다. 즉, 상속받은 모든 형들을 부모형이 받을 수 있다는 뜻.

3. 아래가 되지 않는 이유에 대하여 메모리 그림으로 설명하시오.
//소스코드는 오늘 소스 코드 내용을 참조해 주세요.
//MobilePhone(부모) SmartPhone(자식)
SmartPhone ph2 = new MobilePhone();
 - 노트에 그려놓음

4.오버로딩 vs 오버라이딩 에 대하여 설명하시오.
 - 메소드 오버로딩 :  파라미터 갯수와 타입을 달리해서 같은 이름으로 여러개의 메소드를 만듬
 - 메소드 오버라이딩 : 상속 관계에서 같은 데이터타입의 같은 이름을 가진, body(구현된 내용)만 다른 함수를 만들어서 사용하는 것.

5. 다음을 만족하는 클래스 Employee를 작성하시오. Series _01 (필수)

      (6번 문제는 이것과 관련된 문제입니다.)

- 클래스 Employee(직원)은 클래스 Regular(정규직)와 Temporary(비정규직)의 상위 클래스
- 필드: 이름, 나이, 주소, 부서, 월급 정보를 필드로 선언
- 생성자 : 이름, 나이, 주소, 부서를 지정하는 생성자 정의
- 메소드 printInfo() : 인자는 없고 자신의 필드 이름, 나이, 주소, 부서를 출력
-----------------------------------------------------------------------------------
class Employee{
	private String name, address, dept;
	private int age, salary;
	
	public Employee() {}
	
	public Employee(String name, int age, String address, String dept) {
		this.name = name;
		this.age = age;
		this.address = address;
		this.dept = dept;
	}
	

	
	public void printInfo() {
		System.out.println("이름 : " + this.name);
		System.out.println("나이 : " + this.age);
		System.out.println("주소 : " + this.address);
		System.out.println("부서 : " + this.dept);
		
	}
}
-----------------------------------------------------------------------------------

6 다음을 만족하는 클래스 Regular를 작성하시오. Series_02 (필수)

- 클래스 Regular는 위에서 구현된 클래스 Employee의 하위 클래스
- 생성자 : 이름, 나이, 주소, 부서를 지정하는 상위 생성자 호출
- Setter : 월급 정보 필드를 지정
- 메소드 printInfo() : 인자는 없고 "정규직"이라는 정보와 월급을 출력
-----------------------------------------------------------------------------------
class Regular extends Employee{
	
	public Regular(String name, int age, String address, String dept, int salary) {
		super(name, age, address, dept);
		super.setSalary(salary);
	}
	
	public void printInfo() {
		super.printInfo();
		System.out.println("월급 : " + super.getSalary());
	}
}
-----------------------------------------------------------------------------------

7. 프로그래밍 (자바의 정석: 연습 문제 56page)
-----------------------------------------------------------------------------------
class Buyer { // 마트에서 물건을 사려는 사람을 객체화시킴
	int money = 1000;
	Product[] cart = new Product[3]; // 구입한 제품을 저장하기 위한 배열
	int i = 0; // Product cart index 배열에 사용함

	void buy(Product p) {
		
		// 1.1  가진 돈과 물건의 가격을 비교해서 가진 돈이 적으면 메서드를 종료한다
		if(money < p.price) {
			System.out.println("잔액이 부족하여 "+p.toString() +"을/를 살 수 없습니다.");
			return;
		}
		//1.2  가진 돈이 충분하면 제품의 가격을 가진 돈에서 빼고
		money = money-p.price; 
		//1.3  장바구니에 구입한 물건을 담는다.(add메소드 호출)
		add(p); 
		
	}

	void add(Product p) {
		//1.1 i의 값이 장바구니의 크기보다 같거나 크면
		if(i >= cart.length) {
			// 1.1.1 기존의 장바구니보다 2배 큰 새로운 배열을 생성한다
			Product[] tmp = new Product[cart.length*2]; 
			// 1.1.2 기존의 장바구니의 내용을 새로운 배열에 복사한다
			System.arraycopy(cart, 0, tmp, 0, cart.length); 
			// 1.1.3 새로운 장바구니와 기존의 장바구니를 바꾼다
			cart = tmp;
		}
		//1.2 물건을 장바구니(cart)에 저장한다 그리고 i의 값을 1 증가시킨다
		cart[i++] = p;
		
	} 

	void summary() {
		String itemList = "";
		int sum = 0;
		
		for (Product product : cart) {
			//  1.1  장바구니에 담긴 물건들의 목록을 만들어 출력한다
			itemList = itemList + " " + product.toString();
			 // 1.2  장바구니에 담긴 물건들의 가격을 모두 더해서 출력한다
			sum += product.price;
		}
		
		System.out.println("구매한 물건은 : " + itemList);
		System.out.println("사용한 금액은 : " + sum);
		// 1.3  물건을 사고 남은 금액(money)를 출력한다
		System.out.println("남은 금액은 : " + money);
	} 
}

class Product {
	int price; // 제품의 가격

	Product(int price) {
		this.price = price;
	}
}

class Tv extends Product {
	Tv() {
		super(100);
	}

	public String toString() {
		return "Tv";
	}
}

class Computer extends Product {
	Computer() {
		super(200);
	}

	public String toString() {
		return "Computer";
	}
}

class Audio extends Product {
	Audio() {
		super(50);
	}

	public String toString() {
		return "Audio";
	}
}

public class BuyerTest {

	public static void main(String[] args) {
		Buyer buyer = new Buyer();
		
		buyer.buy(new Tv());
		buyer.buy(new Computer());	
		buyer.buy(new Tv());	
		buyer.buy(new Audio());
		buyer.buy(new Computer());
		buyer.buy(new Computer());
		buyer.buy(new Computer());
		
		buyer.summary();

	}

}
-----------------------------------------------------------------------------------